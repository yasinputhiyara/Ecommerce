<%- include("../../partials/header") %>

  <link rel="stylesheet" href="/user/stylesheets/profile.css">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }

    body {
      min-height: 100vh;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      padding: 20px;
    }
  </style>

  <div class="profile-session-container">
    <div class="container-fluid">
      <div class="dashboard">
        <!-- Sidebar -->
        <div class="sidebar">
          <a href="/dashboard" class="w-100">
            <button class="nav-button w-100">dashboard</button>
          </a>
          <a href="/orders" class="w-100">
            <button class="nav-button w-100">Orders</button>
          </a>

          <a href="/update-profile" class="w-100">
            <button class="nav-button w-100">Update Profile</button>
          </a>

          <a href="/address" class="w-100">
            <button class="nav-button active w-100">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Address
            </button>
          </a>
          <a href="/wallet" class="w-100">
            <button class="nav-button w-100">Wallet</button>
          </a>
          <a href="/logout" class="w-100">
            <button class="nav-button w-100">Logout</button>
          </a>
        </div>

        <!-- Main Content -->
        <div class="main-content">
          <h2 class="section-title">Address</h2>
          <div class="container mt-5">
            <div class="row">
              <div class="col-12">
                <div class="card">
                  <div class="card-header d-flex justify-content-between align-items-center">
                    <h2>Address Management</h2>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addressModal"
                      onclick="prepareModal('create')">
                      Create New Address
                    </button>
                  </div>

                  <!-- Address List -->
                  <div class="card-body">
                    <% if (addresses && addresses.length> 0) { %>
                      <div class="row">
                        <% addresses.forEach((address, index)=> { %>
                          <div class="col-12 mb-3 address-card">
                            <div class="card">
                              <div class="card-body">
                                <p><strong>Address Type:</strong>
                                  <%= address.addressType %>
                                </p>
                                <p><strong>Name:</strong>
                                  <%= address.name %>
                                </p>
                                <p><strong>City:</strong>
                                  <%= address.city %>
                                </p>
                                <p><strong>Landmark:</strong>
                                  <%= address.landMark %>
                                </p>
                                <p><strong>State:</strong>
                                  <%= address.state %>
                                </p>
                                <p><strong>Pincode:</strong>
                                  <%= address.pincode %>
                                </p>
                                <p><strong>Phone:</strong>
                                  <%= address.phone %>
                                </p>
                                <p><strong>Alternate Phone:</strong>
                                  <%= address.altPhone %>
                                </p>
                                <div class="d-flex justify-content-between">
                                  <button class="btn btn-warning" data-bs-toggle="modal"
                                    data-bs-target="#editAddressModal" onclick="editPrepareModal('<%= address._id %>')">
                                    Edit
                                  </button>
                                  <button class="btn btn-danger" onclick="removeAddress('<%= address.id %>')">
                                    Remove
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                          <% }); %>
                      </div>
                      <% } else { %>
                        <p class="text-center">No addresses found. Click "Create New Address" to add one.</p>
                        <% } %>
                  </div>

                </div>
              </div>
            </div>

            <!--Add Address Modal -->
            <div class="modal fade" id="addressModal" tabindex="-1">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Create/Update Address</h5>
                    <button type="button" class="btn-close" onclick="cancelButton()" data-bs-dismiss="modal"
                      aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <form id="addressForm" action="/add-address" method="POST">
                      <input type="hidden" id="addressId" name="id" value="<%=user._id  %>">

                      <!-- Address Type Dropdown -->
                      <div class="mb-3">
                        <label for="addressTypeInput" class="form-label">Address Type</label>
                        <select class="form-control" id="addressTypeInput" name="addressType" required
                          aria-describedby="addressTypeHelp">
                          <option value="" disabled selected>Select Address Type</option>
                          <option value="Home">Home</option>
                          <option value="Office">Office</option>
                          <option value="School">School / College</option>
                          <!-- <option value="College">College</option> -->
                        </select>
                      </div>

                      <!-- Other Input Fields -->
                      <div class="mb-3">
                        <label for="nameInput" class="form-label">Name</label>
                        <input type="text" class="form-control" id="nameInput" name="name" required
                          aria-describedby="nameHelp">
                      </div>
                      <div class="mb-3">
                        <label for="cityInput" class="form-label">City</label>
                        <input type="text" class="form-control" id="cityInput" name="city" required
                          aria-describedby="cityHelp">
                      </div>
                      <div class="mb-3">
                        <label for="landmarkInput" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="landmarkInput" name="landMark" required
                          aria-describedby="landmarkHelp">
                      </div>
                      <div class="mb-3">
                        <label for="stateInput" class="form-label">State</label>
                        <input type="text" class="form-control" id="stateInput" name="state" required
                          aria-describedby="stateHelp">
                      </div>
                      <div class="mb-3">
                        <label for="pincodeInput" class="form-label">Pincode</label>
                        <input type="number" class="form-control" id="pincodeInput" name="pincode" required
                          aria-describedby="pincodeHelp">
                      </div>
                      <div class="mb-3">
                        <label for="phoneInput" class="form-label">Phone</label>
                        <input type="text" class="form-control" id="phoneInput" name="phone" required
                          aria-describedby="phoneHelp">
                      </div>
                      <div class="mb-3">
                        <label for="altPhoneInput" class="form-label">Alternate Phone</label>
                        <input type="text" class="form-control" id="altPhoneInput" name="altPhone" required
                          aria-describedby="altPhoneHelp">
                      </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelButton" data-bs-dismiss="modal"
                      onclick="cancelButton()">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveButton">Save Address</button>
                  </div>
                </div>
              </div>
            </div>

            <!--Edit Address Modal -->
            <div class="modal fade" id="editAddressModal" tabindex="-1">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Update Address</h5>
                    <button type="button" class="btn-close" onclick="cancelButton()" data-bs-dismiss="modal"
                      aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <!-- In the edit modal, change all IDs to be unique -->
                    <form id="editAddressForm" action="/edit-address" method="POST">
                      <input type="hidden" id="editAddressId" name="id" value="<%=user._id %>">
                      <input type="hidden" id="addressToEditId" name="addressId">

                      <div class="mb-3">
                        <label for="editAddressTypeInput" class="form-label">Address Type</label>
                        <select class="form-control" id="editAddressTypeInput" name="addressType" required>
                          <option value="" selected>Select Address Type</option>
                          <option value="Home">Home</option>
                          <option value="Office">Office</option>
                          <option value="School">School / College</option>
                        </select>
                      </div>

                      <div class="mb-3">
                        <label for="editNameInput" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editNameInput" name="name" required>
                      </div>

                      <div class="mb-3">
                        <label for="editCityInput" class="form-label">City</label>
                        <input type="text" class="form-control" id="editCityInput" name="city" required>
                      </div>

                      <div class="mb-3">
                        <label for="editLandmarkInput" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="editLandmarkInput" name="landMark" required>
                      </div>

                      <div class="mb-3">
                        <label for="editStateInput" class="form-label">State</label>
                        <input type="text" class="form-control" id="editStateInput" name="state" required>
                      </div>

                      <div class="mb-3">
                        <label for="editPincodeInput" class="form-label">Pincode</label>
                        <input type="number" class="form-control" id="editPincodeInput" name="pincode" required>
                      </div>

                      <div class="mb-3">
                        <label for="editPhoneInput" class="form-label">Phone</label>
                        <input type="text" class="form-control" id="editPhoneInput" name="phone" required>
                      </div>

                      <div class="mb-3">
                        <label for="editAltPhoneInput" class="form-label">Alternate Phone</label>
                        <input type="text" class="form-control" id="editAltPhoneInput" name="altPhone" required>
                      </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelButton" data-bs-dismiss="modal"
                      onclick="cancelButton()">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveButton">Save Address</button>
                  </div>
                </div>
              </div>
            </div>


          </div>


        </div>
      </div>
    </div>
  </div>


  <script>
    // JavaScript to handle form submission and show SweetAlert
    document.getElementById('saveButton').addEventListener('click', async () => {
      const form = document.getElementById('addressForm');
      const formData = new FormData(form);

      // Convert form data to a JSON object
      const data = Object.fromEntries(formData.entries());

      try {

        // Send the data to the server using Fetch
        const response = await fetch('/add-address', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        // Check if the request was successful
        if (response.ok) {
          // Show success SweetAlert
          Swal.fire({
            title: 'Success!',
            text: result.message || 'Address saved successfully.',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            // Reload the page or close the modal
            location.reload();
          });
        } else {
          // Show error SweetAlert
          Swal.fire({
            title: 'Error!',
            text: result.message || 'Failed to save address. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        // Handle any network or unexpected errors
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong. Please check your connection and try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        console.error('Error:', error);
      }
    });

    // Cancel button resets the form and modal
    function cancelButton() {
      const form = document.getElementById('addressForm');
      form.reset();
      document.getElementById('addressId').value = '';
      document.getElementById('modalTitle').textContent = 'Create/Update Address';
    }

    // Prepare modal for edit or create
    async function editPrepareModal(addressId) {
      try {
        const response = await fetch(`/get-address/${addressId}`);
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Failed to fetch address data');
        }

        const addressData = result.address;

        // Set address ID in hidden input
        document.getElementById('addressToEditId').value = addressId;

        // Populate form fields with unique IDs
        document.getElementById('editAddressTypeInput').value = addressData.addressType;
        document.getElementById('editNameInput').value = addressData.name;
        document.getElementById('editCityInput').value = addressData.city;
        document.getElementById('editLandmarkInput').value = addressData.landMark;
        document.getElementById('editStateInput').value = addressData.state;
        document.getElementById('editPincodeInput').value = addressData.pincode;
        document.getElementById('editPhoneInput').value = addressData.phone;
        document.getElementById('editAltPhoneInput').value = addressData.altPhone;

      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to load address data. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }

    // Function to populate the edit form with existing address data
    function populateEditForm(addressData) {
      const editForm = document.getElementById('editAddressModal').querySelector('#addressForm');

      // Add the address ID to the form
      const addressIdInput = document.createElement('input');
      addressIdInput.type = 'hidden';
      addressIdInput.name = 'addressId';
      addressIdInput.value = addressData._id;
      editForm.appendChild(addressIdInput);

      // Populate other fields
      editForm.querySelector('#addressTypeInput').value = addressData.addressType;
      editForm.querySelector('#nameInput').value = addressData.name;
      editForm.querySelector('#cityInput').value = addressData.city;
      editForm.querySelector('#landmarkInput').value = addressData.landMark;
      editForm.querySelector('#stateInput').value = addressData.state;
      editForm.querySelector('#pincodeInput').value = addressData.pincode;
      editForm.querySelector('#phoneInput').value = addressData.phone;
      editForm.querySelector('#altPhoneInput').value = addressData.altPhone;
    }

    // Add click event listener for the edit form's save button
    document.querySelector('#editAddressModal #saveButton').addEventListener('click', async () => {
      const form = document.getElementById('editAddressForm');
      const formData = new FormData(form);

      // Convert form data to a JSON object
      const data = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/edit-address', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (response.ok) {
          Swal.fire({
            title: 'Success!',
            text: result.message || 'Address updated successfully.',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.error || 'Failed to update address. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong. Please check your connection and try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        console.error('Error:', error);
      }
    });

    function editAddress(addressData) {
      populateEditForm(addressData);
      const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
      editModal.show();
    }


    // Function to remove an address
    async function removeAddress(id) {
      try {
        const confirm = await Swal.fire({
          title: 'Are you sure?',
          text: 'Do you really want to delete this address?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel'
        });

        if (confirm.isConfirmed) {
          const response = await fetch(`/delete-address/${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            Swal.fire({
              title: 'Deleted!',
              text: 'The address has been deleted.',
              icon: 'success',
              confirmButtonText: 'OK'
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: 'Failed to delete address. Please try again.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        }
      } catch (error) {
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        console.error('Error:', error);
      }
    }


  </script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


  <%- include("../../partials/footer") %>