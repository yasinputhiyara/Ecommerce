<%- include("../../partials/header") %>

  <link rel="stylesheet" href="/user/stylesheets/profile.css">

  <style>
    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background: #f8f9fa;
      min-height: 100vh;
    }

    /* Container styles */
    .profile-session-container {
      padding-top: 5rem;
    }

    /* Dashboard layout */
    .dashboard {
      display: flex;
      gap: 1.5rem;
      padding: 1rem;
    }

    /* Sidebar styles */
    .sidebar {
      background: white;
      border-radius: 0.75rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 1.5rem;
      height: fit-content;
      transition: all 0.3s ease;
    }

    .nav-button {
      display: flex;
      align-items: center;
      width: 100%;
      padding: 0.875rem 1.25rem;
      margin-bottom: 0.75rem;
      border: none;
      border-radius: 0.5rem;
      background: transparent;
      color: #4b5563;
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .nav-button:hover {
      background: #f3f4f6;
      color: #1f2937;
    }

    .nav-button.active {
      background: #0d6efd;
      color: white;
    }

    .nav-button svg {
      margin-right: 1rem;
      width: 1.5rem;
      height: 1.5rem;
    }

    .section-title {
      color: #000;
      text-align: center;
      margin-bottom: 25px;
      font-weight: bold;
    }

    /* Enhanced Address Card Styles */
    .address-card {
      transition: all 0.3s ease;
      width: 100%;
    }

    .address-card .card {
      border: 1px solid #e5e7eb;
      border-radius: 1rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
    }

    .address-card .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .address-card .card-body {
      padding: 1.5rem;
      
    }

    .address-card p {
      margin-bottom: 0.75rem;
      color: #4b5563;
      font-size: 0.95rem;
      display: flex;
      justify-content: space-between;
    }

    .address-card p strong {
      color: #1f2937;
      min-width: 140px;
    }

    .address-card .btn {
      padding: 0.5rem 1.25rem;
      font-weight: 500;
      border-radius: 0.5rem;
      transition: all 0.2s ease;
    }

    .address-card .btn-warning {
      background-color: #f59e0b;
      border-color: #f59e0b;
      color: white;
    }

    .address-card .btn-warning:hover {
      background-color: #d97706;
      border-color: #d97706;
    }

    .address-card .btn-danger {
      background-color: #ef4444;
      border-color: #ef4444;
    }

    .address-card .btn-danger:hover {
      background-color: #dc2626;
      border-color: #dc2626;
    }

    /* Card Header Styles */
    .card-header {
      background-color: #f8fafc;
      border-bottom: 1px solid #e5e7eb;
      padding: 1.25rem 1.5rem;
    }

    .card-header h2 {
      font-size: 1.5rem;
      color: #1f2937;
      margin: 0;
    }
    
    .card-header .btn-primary {
      background-color: #0ea5e9;
      border-color: #0ea5e9;
      padding: 0.625rem 1.25rem;
      font-weight: 500;
      border-radius: 0.5rem;
      transition: all 0.2s ease;
    }

    .card-header .btn-primary:hover {
      background-color: #0284c7;
      border-color: #0284c7;
      transform: translateY(-1px);
    }

    /* Modal Styles */
    .modal-content {
      border: none;
      border-radius: 1rem;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
      background-color: #f8fafc;
      border-bottom: 1px solid #e5e7eb;
      border-radius: 1rem 1rem 0 0;
      padding: 1.25rem 1.5rem;
    }

    .modal-header .modal-title {
      color: #1f2937;
      font-weight: 600;
    }

    .modal-body {
      padding: 1.5rem;
    }

    .form-label {
      color: #4b5563;
      font-weight: 500;
      margin-bottom: 0.5rem;
    }

    .form-control {
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      padding: 0.625rem 1rem;
      transition: all 0.2s ease;
    }

    .form-control:focus {
      border-color: #0ea5e9;
      box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
    }

    .modal-footer {
      border-top: 1px solid #e5e7eb;
      padding: 1.25rem 1.5rem;
      border-radius: 0 0 1rem 1rem;
    }

    .modal-footer .btn {
      padding: 0.625rem 1.25rem;
      font-weight: 500;
      border-radius: 0.5rem;
      transition: all 0.2s ease;
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .card-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }

      .card-header .btn-primary {
        width: 100%;
      }

      .address-card .card-body {
        padding: 1rem;
      }

      .address-card p {
        flex-direction: column;
        gap: 0.25rem;
      }

      .address-card p strong {
        min-width: auto;
      }

      .address-card .d-flex {
        flex-direction: column;
        gap: 0.5rem;
      }

      .address-card .btn {
        width: 100%;
      }

      .modal-dialog {
        margin: 0.5rem;
      }
    }

    /* Grid Layout Improvements */
    @media (min-width: 768px) {
      .row {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
      }

      .address-card {
        margin-bottom: 0 !important;
      }
    }

    /* Loading State Styles */
    .btn.loading {
      position: relative;
      color: transparent !important;
    }

    .btn.loading::after {
      content: "";
      position: absolute;
      width: 1rem;
      height: 1rem;
      top: 50%;
      left: 50%;
      margin: -0.5rem 0 0 -0.5rem;
      border: 2px solid #ffffff;
      border-radius: 50%;
      border-right-color: transparent;
      animation: spin 0.75s linear infinite;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
  </style>

  <div class="profile-session-container">
    <div class="container-fluid">
      <div class="dashboard">
        <!-- Sidebar -->
        <%- include("../../partials/profileSideBar") %>


          <!-- Main Content -->
          <div class="main-content">
            <!-- <h2 class="section-title">Address</h2> -->
            <div class="container mt-5">
              <!-- <div class="col"> -->
                <div class="col-12 ">
                  <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                      <h2>Address Management</h2>
                      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addressModal"
                        onclick="prepareModal('create')">
                        Create New Address
                      </button>
                    </div>

                    <!-- Address List -->
                    <div class="card-body">
                      <% if (addresses && addresses.length> 0) { %>
                        <div class="row">
                          <% addresses.forEach((address, index)=> { %>
                            <div class="col-12 mb-3 address-card">
                              <div class="card">
                                <div class="card-body ">
                                  <p><strong>Address Type:</strong>
                                    <%= address.addressType %>
                                  </p>
                                  <p><strong>Name:</strong>
                                    <%= address.name %>
                                  </p>
                                  <p><strong>City:</strong>
                                    <%= address.city %>
                                  </p>
                                  <p><strong>Landmark:</strong>
                                    <%= address.landMark %>
                                  </p>
                                  <p><strong>State:</strong>
                                    <%= address.state %>
                                  </p>
                                  <p><strong>Pincode:</strong>
                                    <%= address.pincode %>
                                  </p>
                                  <p><strong>Phone:</strong>
                                    <%= address.phone %>
                                  </p>
                                  <p><strong>Alternate Phone:</strong>
                                    <%= address.altPhone %>
                                  </p>
                                  <div class="d-flex justify-content-between">
                                    <button class="btn btn-warning" data-bs-toggle="modal"
                                      data-bs-target="#editAddressModal"
                                      onclick="editPrepareModal('<%= address._id %>')">
                                      Edit
                                    </button>
                                    <button class="btn btn-danger" onclick="removeAddress('<%= address.id %>')">
                                      Remove
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <% }); %>
                        </div>
                        <% } else { %>
                          <p class="text-center">No addresses found. Click "Create New Address" to add one.</p>
                          <% } %>
                    </div>

                  </div>
                </div>
              <!-- </div> -->

              <!--Add Address Modal -->
              <div class="modal fade" id="addressModal" tabindex="-1">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="modalTitle">Create/Update Address</h5>
                      <button type="button" class="btn-close" onclick="cancelButton()" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <form id="addressForm" action="/add-address" method="POST">
                        <input type="hidden" id="addressId" name="id" value="<%=user._id  %>">

                        <!-- Address Type Dropdown -->
                        <div class="mb-3">
                          <label for="addressTypeInput" class="form-label">Address Type</label>
                          <select class="form-control" id="addressTypeInput" name="addressType" required
                            aria-describedby="addressTypeHelp">
                            <option value="" disabled selected>Select Address Type</option>
                            <option value="Home">Home</option>
                            <option value="Office">Office</option>
                            <option value="School">School / College</option>
                            <!-- <option value="College">College</option> -->
                          </select>
                        </div>

                        <!-- Other Input Fields -->
                        <div class="mb-3">
                          <label for="nameInput" class="form-label">Name</label>
                          <input type="text" class="form-control" id="nameInput" name="name" required
                            aria-describedby="nameHelp">
                        </div>
                        <div class="mb-3">
                          <label for="cityInput" class="form-label">City</label>
                          <input type="text" class="form-control" id="cityInput" name="city" required
                            aria-describedby="cityHelp">
                        </div>
                        <div class="mb-3">
                          <label for="landmarkInput" class="form-label">Landmark</label>
                          <input type="text" class="form-control" id="landmarkInput" name="landMark" required
                            aria-describedby="landmarkHelp">
                        </div>
                        <div class="mb-3">
                          <label for="stateInput" class="form-label">State</label>
                          <input type="text" class="form-control" id="stateInput" name="state" required
                            aria-describedby="stateHelp">
                        </div>
                        <div class="mb-3">
                          <label for="pincodeInput" class="form-label">Pincode</label>
                          <input type="number" class="form-control" id="pincodeInput" name="pincode" required
                            aria-describedby="pincodeHelp">
                        </div>
                        <div class="mb-3">
                          <label for="phoneInput" class="form-label">Phone</label>
                          <input type="text" class="form-control" id="phoneInput" name="phone" required
                            aria-describedby="phoneHelp">
                        </div>
                        <div class="mb-3">
                          <label for="altPhoneInput" class="form-label">Alternate Phone</label>
                          <input type="text" class="form-control" id="altPhoneInput" name="altPhone" required
                            aria-describedby="altPhoneHelp">
                        </div>
                      </form>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" id="cancelButton" data-bs-dismiss="modal"
                        onclick="cancelButton()">Cancel</button>
                      <button type="button" class="btn btn-primary" id="saveButton">Save Address</button>
                    </div>
                  </div>
                </div>
              </div>

              <!--Edit Address Modal -->
              <div class="modal fade" id="editAddressModal" tabindex="-1">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="modalTitle">Update Address</h5>
                      <button type="button" class="btn-close" onclick="cancelButton()" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <!-- In the edit modal, change all IDs to be unique -->
                      <form id="editAddressForm" action="/edit-address" method="POST">
                        <input type="hidden" id="editAddressId" name="id" value="<%=user._id %>">
                        <input type="hidden" id="addressToEditId" name="addressId">

                        <div class="mb-3">
                          <label for="editAddressTypeInput" class="form-label">Address Type</label>
                          <select class="form-control" id="editAddressTypeInput" name="addressType" required>
                            <option value="" selected>Select Address Type</option>
                            <option value="Home">Home</option>
                            <option value="Office">Office</option>
                            <option value="School">School / College</option>
                          </select>
                        </div>

                        <div class="mb-3">
                          <label for="editNameInput" class="form-label">Name</label>
                          <input type="text" class="form-control" id="editNameInput" name="name" required>
                        </div>

                        <div class="mb-3">
                          <label for="editCityInput" class="form-label">City</label>
                          <input type="text" class="form-control" id="editCityInput" name="city" required>
                        </div>

                        <div class="mb-3">
                          <label for="editLandmarkInput" class="form-label">Landmark</label>
                          <input type="text" class="form-control" id="editLandmarkInput" name="landMark" required>
                        </div>

                        <div class="mb-3">
                          <label for="editStateInput" class="form-label">State</label>
                          <input type="text" class="form-control" id="editStateInput" name="state" required>
                        </div>

                        <div class="mb-3">
                          <label for="editPincodeInput" class="form-label">Pincode</label>
                          <input type="number" class="form-control" id="editPincodeInput" name="pincode" required>
                        </div>

                        <div class="mb-3">
                          <label for="editPhoneInput" class="form-label">Phone</label>
                          <input type="text" class="form-control" id="editPhoneInput" name="phone" required>
                        </div>

                        <div class="mb-3">
                          <label for="editAltPhoneInput" class="form-label">Alternate Phone</label>
                          <input type="text" class="form-control" id="editAltPhoneInput" name="altPhone" required>
                        </div>
                      </form>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" id="cancelButton" data-bs-dismiss="modal"
                        onclick="cancelButton()">Cancel</button>
                      <button type="button" class="btn btn-primary" id="saveButton">Save Address</button>
                    </div>
                  </div>
                </div>
              </div>


            </div>


          </div>
      </div>
    </div>
  </div>


  <script>
    document.getElementById('saveButton').addEventListener('click', async () => {
      const form = document.getElementById('addressForm');
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());

      // Validate form data
      const errors = validateForm(data);

      if (errors.length > 0) {
        // Show validation errors using SweetAlert
        Swal.fire({
          title: 'Validation Error',
          html: errors.join('<br>'),
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }

      try {
        const response = await fetch('/add-address', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (response.ok) {
          Swal.fire({
            title: 'Success!',
            text: result.message || 'Address saved successfully.',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.message || 'Failed to save address. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong. Please check your connection and try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    });

    // Cancel button resets the form and modal
    function cancelButton() {
      const form = document.getElementById('addressForm');
      form.reset();
      document.getElementById('addressId').value = '';
      document.getElementById('modalTitle').textContent = 'Create/Update Address';
    }

    // Prepare modal for edit or create
    async function editPrepareModal(addressId) {
      try {
        const response = await fetch(`/get-address/${addressId}`);
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Failed to fetch address data');
        }

        const addressData = result.address;

        // Set address ID in hidden input
        document.getElementById('addressToEditId').value = addressId;

        // Populate form fields with unique IDs
        document.getElementById('editAddressTypeInput').value = addressData.addressType;
        document.getElementById('editNameInput').value = addressData.name;
        document.getElementById('editCityInput').value = addressData.city;
        document.getElementById('editLandmarkInput').value = addressData.landMark;
        document.getElementById('editStateInput').value = addressData.state;
        document.getElementById('editPincodeInput').value = addressData.pincode;
        document.getElementById('editPhoneInput').value = addressData.phone;
        document.getElementById('editAltPhoneInput').value = addressData.altPhone;

      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to load address data. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }

    document.querySelector('#editAddressModal #saveButton').addEventListener('click', async () => {
      const form = document.getElementById('editAddressForm');
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());

      // Validate form data
      const errors = validateForm(data);

      if (errors.length > 0) {
        // Show validation errors using SweetAlert
        Swal.fire({
          title: 'Validation Error',
          html: errors.join('<br>'),
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }

      try {
        const response = await fetch('/edit-address', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (response.ok) {
          Swal.fire({
            title: 'Success!',
            text: result.message || 'Address updated successfully.',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: result.error || 'Failed to update address. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong. Please check your connection and try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    });

    function editAddress(addressData) {
      populateEditForm(addressData);
      const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
      editModal.show();
    }


    // Function to remove an address
    async function removeAddress(id) {
      try {
        const confirm = await Swal.fire({
          title: 'Are you sure?',
          text: 'Do you really want to delete this address?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel'
        });

        if (confirm.isConfirmed) {
          const response = await fetch(`/delete-address/${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            Swal.fire({
              title: 'Deleted!',
              text: 'The address has been deleted.',
              icon: 'success',
              confirmButtonText: 'OK'
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: 'Failed to delete address. Please try again.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        }
      } catch (error) {
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong. Please try again later.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        console.error('Error:', error);
      }
    }


  </script>

  <script>
    // Validation functions
    function validatePhone(phone) {
      // Allow only Indian phone numbers (10 digits, optionally starting with +91)
      const phoneRegex = /^(?:\+91)?[6-9]\d{9}$/;
      return phoneRegex.test(phone.replace(/\s+/g, ''));
    }

    function validatePincode(pincode) {
      // Indian pincode validation (6 digits)
      const pincodeRegex = /^\d{6}$/;
      return pincodeRegex.test(pincode);
    }

    function validateForm(formData) {
      const errors = [];

      // Check for empty fields
      if (!formData.name.trim()) {
        errors.push('Name is required');
      } else if (!formData.name.match(/^[A-Za-z\s]{3,}$/)) {
        errors.push('Name should contain only letters and be at least 3 characters long');
      }

      if (!formData.phone.trim()) {
        errors.push('Phone number is required');
      } else if (!validatePhone(formData.phone)) {
        errors.push('Please enter a valid 10-digit phone number');
      }

      if (!formData.altPhone.trim()) {
        errors.push('Alternate phone number is required');
      } else if (!validatePhone(formData.altPhone)) {
        errors.push('Please enter a valid alternate phone number');
      }

      // Check if phone and alternate phone are different
      if (formData.phone && formData.altPhone && formData.phone === formData.altPhone) {
        errors.push('Phone and alternate phone numbers should be different');
      }

      if (!formData.pincode.trim()) {
        errors.push('Pincode is required');
      } else if (!validatePincode(formData.pincode)) {
        errors.push('Please enter a valid 6-digit pincode');
      }

      if (!formData.city.trim()) {
        errors.push('City is required');
      } else if (!formData.city.match(/^[A-Za-z\s]{2,}$/)) {
        errors.push('City should contain only letters');
      }

      if (!formData.state.trim()) {
        errors.push('State is required');
      } else if (!formData.state.match(/^[A-Za-z\s]{2,}$/)) {
        errors.push('State should contain only letters');
      }

      return errors;
    }

  </script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


  <%- include("../../partials/footer") %>